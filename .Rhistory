ggplot(se_g, aes(n, se_g, col = corr)) +
geom_line() +
geom_line(aes(y = z), size = 1, col = "black", linetype = 2) +
theme_bw() +
ggtitle(paste("d = ", diff))
# Run calculations for 3 different mean differences.
for (difference in c(0.1, 1, 3)) {
# Define input parameters
n <- 10:300
diff <- difference
sd_diff <- 1
r <- seq(0.01, 0.99, length.out = 10)
# Compute standard error for Fisher's Z
var_z <- 1/(n-3)        # Borenstein 6.3, assuming number of pairs as n
se_z <- sqrt(var_z)     # Borenstein 6.4
# Compute standard error for repeated measures d, for
se_g <- sapply(r, function(r) {
# SE in dz
sd_within <- sd_diff/sqrt(2*(1-r))          # Borenstein 4.27
d <- diff / sd_within                       # Borenstein 4.26
var_d <- ( (1/n)+(d^2/(2*n)) * (2*(1-r)) )  # Borenstein 4.28
# convert to g
j = 1-3/(4*(n-1)-1)   # Borenstein 4.22
var_g <- j^2 * var_d  # Borenstein 4.24
se_g <- sqrt(var_g)   # Borenstein 4.25
})
# reshape the data to long format
se_g <- as.data.frame(se_g)
names(se_g) <- paste("r=", round(seq(0.01, 0.99, length.out = 10), 2), sep = "")
se_g$n <- n
se_g$z <- se_z
se_g <- gather(se_g, corr, se_g, 1:10)
# Plot standard error for different values of inter-trial correlation.
assign(paste("d", diff, sep = ""),
ggplot(se_g, aes(n, se_g, col = corr)) +
geom_line() +
geom_line(aes(y = z), size = 1, col = "black", linetype = 2) +
theme_bw() +
ggtitle(paste("d = ", diff))
)
}
# Plot standard error estimates for three different values of d.
# The stippled black line represents standard error of Fisher's Z.
grid.arrange(d0.1, d1, d3)
# Run calculations for 3 different mean differences.
for (difference in c(0.1, 1, 3)) {
# Define input parameters
n <- 10:300
diff <- difference
sd_diff <- 1
r <- seq(0.01, 0.99, length.out = 10)
# Compute standard error for Fisher's Z
var_z <- 1/(n-3)        # Borenstein 6.3, assuming number of pairs as n
se_z <- sqrt(var_z)     # Borenstein 6.4
# Compute standard error for repeated measures d, for
se_g <- sapply(r, function(r) {
# SE in dz
sd_within <- sd_diff/sqrt(2*(1-r))          # Borenstein 4.27
d <- diff / sd_within                       # Borenstein 4.26
var_d <- ( (1/n)+(d^2/(2*n)) * (2*(1-r)) )  # Borenstein 4.28
# convert to g
j = 1-3/(4*(n-1)-1)   # Borenstein 4.22
var_g <- j^2 * var_d  # Borenstein 4.24
se_g <- sqrt(var_g)   # Borenstein 4.25
})
# reshape the data to long format
se_g <- as.data.frame(se_g)
names(se_g) <- paste("r=", round(seq(0.01, 0.99, length.out = 10), 2), sep = "")
se_g$n <- n
se_g$z <- se_z
se_g <- gather(se_g, corr, se_g, 1:10)
# Plot standard error for different values of inter-trial correlation.
assign(paste("d", diff, sep = ""),
ggplot(se_g, aes(n, se_g, col = corr)) +
geom_line() +
geom_line(aes(y = z), size = 1, col = "black", linetype = 2) +
theme_bw() +
ggtitle(paste("d =", diff))
)
}
# Plot standard error estimates for three different values of d.
# The stippled black line represents standard error of Fisher's Z.
grid.arrange(d0.1, d1, d3)
# Run calculations for 3 different mean differences.
for (difference in c(0.1, 1, 3)) {
# Define input parameters
n <- 10:300
diff <- difference
sd_diff <- 1
r <- seq(0.01, 0.99, length.out = 10)
# Compute standard error for Fisher's Z
var_z <- 1/(n-3)        # Borenstein 6.3, assuming number of pairs as n
se_z <- sqrt(var_z)     # Borenstein 6.4
# Compute standard error for repeated measures d, for
se_g <- sapply(r, function(r) {
# SE in dz
sd_within <- sd_diff/sqrt(2*(1-r))          # Borenstein 4.27
d <- diff / sd_within                       # Borenstein 4.26
var_d <- ( (1/n)+(d^2/(2*n)) * (2*(1-r)) )  # Borenstein 4.28
# convert to g
j = 1-3/(4*(n-1)-1)   # Borenstein 4.22
var_g <- j^2 * var_d  # Borenstein 4.24
se_g <- sqrt(var_g)   # Borenstein 4.25
})
# reshape the data to long format
se_g <- as.data.frame(se_g)
names(se_g) <- paste("r=", round(seq(0.01, 0.99, length.out = 10), 2), sep = "")
se_g$n <- n
se_g$z <- se_z
se_g <- gather(se_g, corr, se_g, 1:10)
# Plot standard error for different values of inter-trial correlation.
assign(paste("d", diff, sep = ""),
ggplot(se_g, aes(n, se_g, col = corr)) +
geom_line() +
geom_line(aes(y = z), size = 1, col = "black", linetype = 2) +
theme_bw() +
ggtitle(paste("mean diff =", diff))
)
}
# Plot standard error estimates for three different values of d.
# The stippled black line represents standard error of Fisher's Z.
grid.arrange(d0.1, d1, d3)
library(plotly)
x <- sapply(seq(0, 1000, length.out = 100), function(x) x * seq(0, 1, length.out = 100))
p <- plot_ly(x = seq(0, 1000, length.out = 100), y = seq(0, 1, length.out = 100), z = x) %>% add_surface()
chart_link = api_create(p, filename="surface-2", )
chart_link
chart_link = api_create(p, filename="surface-2")
chart_link
?plotly
?plotly
p <- plot_ly(x = seq(0, 1000, length.out = 100), y = seq(0, 1, length.out = 100), z = x) %>% add_surface()
plot(p)
library(plotly)
x <- sapply(seq(0, 1000, length.out = 100), function(x) x * seq(0, 1, length.out = 100))
p <- plot_ly(x = seq(0, 1000, length.out = 100), y = seq(0, 1, length.out = 100), z = x) %>% add_surface()
plot_ly(z = ~volcano, type = "surface")
p
(1/10)+(1/10)+(1/10)+(1/10)
(1/5)+(1/10)+(1/5)+(1/10)
(1/5)+(1/10)+(1/8)+(1/10)
(1/5)+(1/10)+(1/5)+(1/10)
(1/5)+(1/10)+(1/3)+(1/12)
(1/5)+(1/10)+(1/8)+(1/7)
(1/5)+(1/10)+(1/3)+(1/12)
(5*12) / (10*3)
(5*120) / (100*3)
(5*95) / (90*10)
(5*90) / (95*10)
(5*12) / (10*3)
5/10
5/12
3/10
0.4166667/0.3
0.3/0.4166667
(5 *12) / (10 *3)
5 *12 / 10 *3
5/10
10/10
1/0.5
0.5/1
(5*10) / (10*10)
(5*10) / (12*3)
(5*100) / (120*3)
(5*10) / (120*3)
5/120
3/10
1/5-1/3-1/10-1/12
1/5+1/3+1/10+1/12
1/5+1/3+1/10+1/120
1/5+1/3+1/10+1/1200000
1/5+1/3+1/10+1/120000000
1/50+1/30+1/100+1/120
1/2 1/4
1/2 + 1/4
1/3 + 1/3
1/2+1/2+1/2+1/2
1/2+1/2+1/2+1/3
1/2+1/3+1/2+1/3
update.packages("psychmeta")
library(psychmeta)
install.packages("psychmeta")
install.packages("psychmeta")
install.packages("psychmeta")
library(psychmeta)
convert_es(1, "d", "cles")
convert_es(1, "d", "cles", sd1 = 1, sd2 = 2)
convert_es(1, "d", "cles", sd1 = 1, sd2 = 10)
convert_es(0,5, "d", "cles")
convert_es(0.5, "d", "cles")
convert_es(1.451, "d", "cles")
pnorm(1.96)
qnorm(pnorm(1.96))
qnorm(0.05)
qnorm(pnorm(1.65))
pnorm(1.56)
pnorm(1.41)
pnorm(1.451)
1.451/sqrt(2)
pnorm(1.026012)
1/100-3
1/(100-3)
pnorm(0.01030928)
pnorm(1-0.01030928)
mean(1:4)
1:4 - mean(1:4)
1:4 - mean(1:5)
1:5 - mean(1:5)
sqrt((1:5 - mean(1:5))^2)
mean(c(1,1,1,2))
mean(c(1,1,1,3))
(1,2)
c(1, 1, 3, 3) - c(2,2,2,2)
cor((1, 1, 3, 3), c(2,2,2,2))
cor(c(1, 1, 3, 3), c(2,2,2,2), method = "s")
cor(c(1, 1, 3, 3), c(2,2,2,2), method = "sp")
cor(c(1, 1, 3, 3), c(2,2,2,2), method = "spearman")
cor(c(1, 1, 3, 3), c(2,2,4,4), method = "spearman")
?convert_es
1:10
3
sum(3>1:10)
sum(3=1:10)
sum(3==1:10)
sum(3==1:10)*0.5
2/10
2/20
3/20
1:10>1:10
1>1:10
2>1:10
3>1:10
10>1:10
c(0,1,2,3,4,5,6,7,8,9)
sum(c(0,1,2,3,4,5,6,7,8,9)) / 100
length(1:10)
10/100
10/100*0.5
sum(c(0,1,2,3,4,5,6,7,8,9))
sum(c(0,1,2,3,4,5,6,7,8,9)) + (0.5*10))
sum(c(0,1,2,3,4,5,6,7,8,9) + (0.5*10))
sum(c(0,1,2,3,4,5,6,7,8,9)) + (0.5*10)
(sum(c(0,1,2,3,4,5,6,7,8,9)) + (0.5*10)) / 10*10
(sum(c(0,1,2,3,4,5,6,7,8,1)) + (0.5*10)) / 10*10
(sum(c(0,1,2,3,4,5,6,7,8,1)) + (0.5*10)) / (10*10)
91/100
(sum(c(0,1,2,3,4,5,6,7,8,1)) + (0.5*10)) / (10*1)
1:3 %*% 1:3
1:3 * 1:3
sapply(1:10, function(x) x>1:10)
sum(sapply(1:10, function(x) x>1:10))
rnorm(10)
sapply(rnorm(10), function(x) x>rnorm(10))
sapply(rnorm(10), function(x) x>rnorm(10))
sapply(rnorm(10), function(x) x>rnorm(10))
sum(sapply(rnorm(10), function(x) x>rnorm(10)))
sum(sapply(rnorm(10), function(x) x>rnorm(10)))
sum(sapply(rnorm(10), function(x) x>rnorm(10)))
sum(sapply(rnorm(10), function(x) x>rnorm(10)))
sum(sapply(rnorm(10), function(x) x>rnorm(10)))
sum(sapply(rnorm(10), function(x) x>rnorm(10)))
sum(sapply(rnorm(10), function(x) x>rnorm(10)))
sum(sapply(rnorm(10), function(x) x>rnorm(10)))
sum(sapply(rnorm(1000), function(x) x>rnorm(1000)))
sum(sapply(rnorm(1000), function(x) x>rnorm(1000)))
1/3 + 1/3
1/4 + 1/2
1/5 + 1/1
plot(x[,5], x[,4])
grid.arrange(d0.1, d1, d3)
library(tidyverse)
library(gridExtra)
pnorm(1.96)
pnorm(1.96-1)
pnorm(1.96-4)
pnorm(1.96)
4
4-1.96
pnorm(2.04)
pt(1.96)
pt(1.96, 10)
pt(1.96, 5)
pt(1.96, 1000)
pt(1.96, 1000000)
pt(1.96, 10)
pt(-1.96, 10)
pt(-1.96, 100)
pt(-1.96, 10)/2
pt(-1.96, 10)*2
pt(-1.96, 1000)*2
pnorm(1.96-1.96)
pnorm(1.96-2)
pnorm(2-1.96)
pnorm(1-1.96)
pt(-1.96, 1000)*2
qnorm(0.8)
qt(0.8, 10)
qt(0.8, 100)
qt(0.8, 100)*2
qt(0.8, 100, ncp = 2.5036435)*2
qt(0.8, 100, ncp = 2.5036435)
qt(0.8, 100, ncp = 2.5036435)/2
qt(0.8, 102, ncp = 2.5036435)/2
qt(0.8, 101, ncp = 2.5036435)/2
qt(0.05, 100, ncp = 2.5036435)/2
qt(0.05, 100, ncp = 2.5036435)
qt(0.05, 100)
qt(0.025, 100)
qt(0.025, 10)
qt(0.025, 100)
79*79*41
255*255*183
255881 * 114
library(psychmeta)
convert_es(psychmeta::convert_es(1, "d", "cles"))
convert_es(1, "d", "cles")
convert_es(1.451, "d", "cles")
pnorm(1.451)
pnorm(1.96)
pnorm(q = 1.451, 1)
pnorm(q = 1.451, 0)
pnorm(q = 1.451, 2)
pnorm(q = 1.451, 10)
pnorm(1.96)
View(cursci)
grepl("inconsistent", cursci$rep.outcome)
home(grepl("inconsistent", cursci$rep.outcome))
sum(grepl("inconsistent", cursci$rep.outcome))
sum(grepl("inconsistent", cursci$rep.outcome))/nrow(cursci)
nrow(cursci)
power()
power.t.test(n = 10, delta = 1, sd = 1, sig.level = .05, type = "independent")
power.t.test(n = 10, delta = 1, sd = 1, sig.level = .05, type = "one.sample")
power.t.test(n = 10, delta = 1, sd = 1, sig.level = .05, type = "two.sample")
power.t.test(n = 10, delta = 1, sd = 1, sig.level = .05, type = "paired")
power.t.test(n = 10, delta = 1, sd = 1, sig.level = .05, type = "paired")$power
power.t.test(n = 10, delta = 1, sd = 1, sig.level = .05, type = "o")$power
power.t.test(n = 10, delta = 1, sd = 1, sig.level = .05, type = "t")$power
power.t.test(n = 20, delta = 1, sd = 1, sig.level = .05, type = "t")$power
power.t.test(n = 18, delta = 1, sd = 1, sig.level = .05, type = "t")$power
power.t.test(n = 17, delta = 1, sd = 1, sig.level = .05, type = "t")$power
power.t.test(n = 16, delta = 1, sd = 1, sig.level = .05, type = "t")$power
power.anova.test(groups = 2, n = 10, between.var = 1, within.var = 1, sig.level = 0.05)
power.anova.test(groups = 2, n = 10, between.var = 1, within.var = 2, sig.level = 0.05)
power.anova.test(groups = 2, n = 10, between.var = 1, within.var = 1, sig.level = 0.05)
power.anova.test(groups = 3, n = 10, between.var = 1, within.var = 1, sig.level = 0.05)
power.anova.test(groups = 4, n = 10, between.var = 1, within.var = 1, sig.level = 0.05)
power.anova.test(groups = 2, n = 10, between.var = 1, within.var = 1, sig.level = 0.05)
?power.anova.test
?power.t.test
power.anova.test(groups = 2, n = 10, between.var = 1, within.var = 1, sig.level = 0.05)
power.anova.test(groups = 4, n = 5, between.var = 1, within.var = 1, sig.level = 0.05)
power.anova.test(groups = 10, n = 2, between.var = 1, within.var = 1, sig.level = 0.05)
power.anova.test(groups = 10, n = 2, between.var = 1, within.var = 2, sig.level = 0.05)
power.anova.test(groups = 2, n = 10, between.var = 1, within.var = 2, sig.level = 0.05)
power.anova.test(groups = 4, n = 5, between.var = 1, within.var = 2, sig.level = 0.05)
power.anova.test(groups = 5, n = 4, between.var = 1, within.var = 2, sig.level = 0.05)
20-5-1
20-10-1
power.t.test(n = 16, delta = 1, sd = 1, sig.level = .05, type = "t")$power
power.t.test(n = 16, delta = 1, sd = 1, sig.level = .05, type = "w")$power
power.t.test(n = 16, delta = 1, sd = 1, sig.level = .05, type = "p")$power
power.t.test(power = .9, delta = 1, sd = 1, sig.level = .05, type = "p")$power
power.t.test(power = .9, delta = 1, sd = 10, sig.level = .05, type = "p")$power
power.t.test(power = .9, delta = 1, sd = 10, sig.level = .05, type = "p")
power.t.test(power = .9, delta = 1, sd = 10, sig.level = .05, type = "t")
power.t.test(power = .9, delta = 1, sd = 3, sig.level = .05, type = "t")
power.t.test(power = .9, delta = 1, sd = 3, sig.level = .05, type = "p")
400/4
400/8
prod(2,2)
prod(2,2, 2)
prod(2,2,2)^2
prod(2,2,2)*2
50*2*4
50*2*6
50*2*3
50*2*(prod(2))
50*2*(prod(3))
50*(prod(2,2)*2)
50*(prod(2,2)^2)
2*2*2
2*2^2
var_d <- ( (1/n)+(d^2/(2*n)) * (2*(1-r)) )  # Borenstein 4.28
prod(2,2)^2
prod(2,2)
(2*2)^2
prod(2,2,2)
prod(2,2,2)*@
prod(2,2,2)*2
prod(2,2,2,2)*2
prod(2,2,2,16)
prod(2,2,8)
prod(2,2,2)+2^(3-1)
prod(2,2,2)+(2^(3-1))
(2^(3-1))
prod(2,2,2)*(2^(3-1))
prod(2,2,8)
prod(2,2,2,2)
prod(2,2,2,2,2)
prod(2,2,2)
prod(2,2,2)^3
prod(2,2,2)
prod(2,2,8)
2^3
2^3+3
2^(3+3)
2^(3+3-1)
prod(2,2,2,2)
prod(2,2,2,16)
2^(4+4-1)
prod(2,2,6)
1-( ( (1^2*100)/2^2 ) /2)
(1^2*100)/2^2
(1^2*100)/2^2/2
2*0.3*0.4
2*(0.3*0.4)
50*2*prod(2,2,2)
50*2*prod(2,2)
50*2*prod(2,2,2)
50*2^2*prod(2,2,2)
50*3^2*prod(2,2,2)
50*2^2*prod(2,2,2)
50*2^3*prod(2,2,2)
50*2^3*prod(2,2,2,2)
50*2^3*prod(2,2)
50*2^2*prod(2,2)
50*2
50*2^2
50*2^2*prod(2)
50*2^2*prod(2)
50*2^3*prod(2,2)
50*2^4*prod(2,2,2)
50*2^2*prod(2)
50*3^2*prod(2)
50*2^2*prod(3)
c(2,2,2)
prod(2,2,2)
prod(2,2)
100*4
prod(2,2,2,2)
100*8*2
100*16*2
100*16*4
log(8,2)
50*2^1*prod(2,2)
50*2^1*prod(2)
50*2^-1*prod(2)
50*2^0*prod(2)
50*4^1*prod(2,2,2,2)
50*2^(3-1)*prod(2,2,2)
50*2^(2-1)*prod(2,2)
t <- 2
r <- 0.5
n = 10
d <- t*(2(1-r)/n)^(1/2)
t <- 2
r <- 0.5
n = 10
t*(2(1-r)/n)^(1/2)
t*(2(1-r)/n)
d <- t*(2(1-r)/n)^(1/2)
t*(2
)
1-r
d <- t*(2*(1-r)/n)^(1/2)
t*(2*(1-r)/n)^(1/2)
r <- (((2*t^2) - d^2) * n) / (2*t^2)
r
t <- 2
r <- 0.5
n = 10
d <- t*(2*(1-r)/n)^(1/2)
(2*(1-r)/n)^(1/2)
t* (2*(1-r)/n)^(1/2)
(2*t^2)
( (2*t^2) - (d^2 * n) ) / (2*t^2)
t <- 2
r <- 0.5
n = 10
d <- t * (2*(1-r)/n)^(1/2)
d
r
r <- ( (2*t^2) - (d^2 * n) ) / (2*t^2)
r
SD1 <- 2
SD2 <- 2.5
r <- 0.3
Sdiff <- sqrt(SD2^2+SD2^2 − 2*r*SD1*SD2)
Sdiff
SD2^2+SD2^2 − 2*r*SD1*SD2
Sdiff <- sqrt(SD1^2+SD2^2 − 2*r*SD1*SD2)
Sdiff
SD1^2+SD2^2-Sdiff^2 / (2*SD1*SD2)
(SD1^2+SD2^2-Sdiff^2) / (2*SD1*SD2)
Sdiff <- sqrt(SD1^2+SD2^2 − 2*r*SD1*SD2)
Sdiff
SD1 <- 2
SD2 <- 2.5
r <- 0.3
r
SD1 <- 2
SD2 <- 2.5
r <- 0.6
Sdiff <- sqrt(SD1^2+SD2^2 − 2*r*SD1*SD2)
(SD1^2+SD2^2-Sdiff^2) / (2*SD1*SD2)
r
SD1 <- 2
SD2 <- 2.5
r <- 0.99
Sdiff <- sqrt(SD1^2+SD2^2 − 2*r*SD1*SD2)
(SD1^2+SD2^2-Sdiff^2) / (2*SD1*SD2)

x <- curate_science$orig.N[i]
if (curate_science$orig.ES.type[i] %in% c("dz", "PD")) {  # Find within-subject designs based on the effects size calculated (dz always used to refer to within-subject effect. PD was only used for precognition replication, also a within-subject design)
x <- x * 2/(1-0)  # Applies the formula for within-subject design conversin in SM1. The calculation assumes two groups and no correlation between the groups.
}
if (grepl(";", curate_science$IVs[i]) & !grepl("Hughes et al", curate_science$IVs[i])) {  # Find all studies with more than one IV, but ignore the one case where ";" is not used to separate IVs
f <- length(unlist(strsplit(curate_science$IVs[i], ";")))  # Count factors in interaction
lvl <- 2  # Assume for simplicity that all factors have 2 levels, which in this dataset is often but not always correct
x <- x / (2^(f-1)) / (f*lvl) * 2  # Applies the formula for interaction conversion in SM1, and multiplies the result by two to get the total sample size for a 2 group effect.
}
return(x)
})
adjusted_n_orig
adjusted_n_orig <- sapply(1:nrow(curate_science), function(i) {
x <- curate_science$orig.N[i]
if (curate_science$orig.ES.type[i] %in% c("dz", "PD")) {  # Find within-subject designs based on the effects size calculated (dz always used to refer to within-subject effect. PD was only used for precognition replication, also a within-subject design)
x <- x * 2/(1-0)  # Applies the formula for within-subject design conversin in SM1. The calculation assumes two groups and no correlation between the groups.
}
if (grepl(";", curate_science$IVs[i]) & !grepl("Hughes et al", curate_science$IVs[i])) {  # Find all studies with more than one IV, but ignore the one case where ";" is not used to separate IVs
f <- length(unlist(strsplit(curate_science$IVs[i], ";")))  # Count factors in interaction
lvl <- 2  # Assume for simplicity that all factors have 2 levels, which in this dataset is often but not always correct
x <- x / (2^(f-1)) / (f*lvl) * 2  # Applies the formula for interaction conversion in SM1, and multiplies the result by two to get the total sample size for a 2 group effect.
}
return(x)
})
i
i
rm(i)
ls
adjusted_n_orig <- sapply(1:nrow(curate_science), function(i) {
x <- curate_science$orig.N[i]
if (curate_science$orig.ES.type[i] %in% c("dz", "PD")) {  # Find within-subject designs based on the effects size calculated (dz always used to refer to within-subject effect. PD was only used for precognition replication, also a within-subject design)
x <- x * 2/(1-0)  # Applies the formula for within-subject design conversin in SM1. The calculation assumes two groups and no correlation between the groups.
}
if (grepl(";", curate_science$IVs[i]) & !grepl("Hughes et al", curate_science$IVs[i])) {  # Find all studies with more than one IV, but ignore the one case where ";" is not used to separate IVs
f <- length(unlist(strsplit(curate_science$IVs[i], ";")))  # Count factors in interaction
lvl <- 2  # Assume for simplicity that all factors have 2 levels, which in this dataset is often but not always correct
x <- x / (2^(f-1)) / (f*lvl) * 2  # Applies the formula for interaction conversion in SM1, and multiplies the result by two to get the total sample size for a 2 group effect.
}
return(x)
})
adjusted_n_orig <- sapply(1:nrow(curate_science), function(i) {
x <- curate_science$orig.N[i]
if (curate_science$orig.ES.type[i] %in% c("dz", "PD")) {  # Find within-subject designs based on the effects size calculated (dz always used to refer to within-subject effect. PD was only used for precognition replication, also a within-subject design)
x <- x * 2/(1-0)  # Applies the formula for within-subject design conversin in SM1. The calculation assumes two groups and no correlation between the groups.
}
if (grepl(";", curate_science$IVs[i]) & !grepl("Hughes et al", curate_science$IVs[i])) {  # Find all studies with more than one IV, but ignore the one case where ";" is not used to separate IVs
f <- length(unlist(strsplit(curate_science$IVs[i], ";")))  # Count factors in interaction
lvl <- 2  # Assume for simplicity that all factors have 2 levels, which in this dataset is often but not always correct
x <- x / (2^(f-1)) / (f*lvl) * 2  # Applies the formula for interaction conversion in SM1, and multiplies the result by two to get the total sample size for a 2 group effect.
}
return(x)
})
i
i
nrow(curate_science)
9L
typeof(9L)
curate_science$9
curate_science[9,]
strsplit(curate_science$IVs[9], ";"))
strsplit(curate_science$IVs[9], ";")
strsplit(curate_science$IVs[8], ";")
curate_science$IVs[8]
strsplit(as.character(curate_science$IVs[9]), ";")
summary(curate_science)
curate_science$IVs <- as.character(IVs)
curate_science$IVs <- as.character(curate_science$IVs)
if (grepl(";", curate_science$IVs[i]) & !grepl("Hughes et al", curate_science$IVs[i])) {  # Find all studies with more than one IV, but ignore the one case where ";" is not used to separate IVs
f <- length(unlist(strsplit(curate_science$IVs[i], ";")))  # Count factors in interaction
lvl <- 2  # Assume for simplicity that all factors have 2 levels, which in this dataset is often but not always correct
x <- x / (2^(f-1)) / (f*lvl) * 2  # Applies the formula for interaction conversion in SM1, and multiplies the result by two to get the total sample size for a 2 group effect.
}
adjusted_n_orig <- sapply(1:nrow(curate_science), function(i) {
x <- curate_science$orig.N[i]
if (curate_science$orig.ES.type[i] %in% c("dz", "PD")) {  # Find within-subject designs based on the effects size calculated (dz always used to refer to within-subject effect. PD was only used for precognition replication, also a within-subject design)
x <- x * 2/(1-0)  # Applies the formula for within-subject design conversin in SM1. The calculation assumes two groups and no correlation between the groups.
}
if (grepl(";", curate_science$IVs[i]) & !grepl("Hughes et al", curate_science$IVs[i])) {  # Find all studies with more than one IV, but ignore the one case where ";" is not used to separate IVs
f <- length(unlist(strsplit(curate_science$IVs[i], ";")))  # Count factors in interaction
lvl <- 2  # Assume for simplicity that all factors have 2 levels, which in this dataset is often but not always correct
x <- x / (2^(f-1)) / (f*lvl) * 2  # Applies the formula for interaction conversion in SM1, and multiplies the result by two to get the total sample size for a 2 group effect.
}
return(x)
})
adjusted_n_orig
curate_science$orig.N.adj <- unlist(adjusted_n_orig)
curate_science$orig.RV <- curate_science$orig.citations / curate_science$orig.N.adj
adjusted_n_rep <- sapply(1:nrow(curate_science), function(i) {
x <- curate_science$rep.N[i]
if (curate_science$orig.ES.type[i] %in% c("dz", "PD")) {  # Find within-subject designs based on the effects size calculated (dz always used to refer to within-subject effect. PD was only used for precognition replication, also a within-subject design)
x <- x * 2/(1-0)  # Applies the formula for within-subject design conversin in SM1. The calculation assumes two groups and no correlation between the groups.
}
if (grepl(";", curate_science$IVs[i]) & !grepl("Hughes et al", curate_science$IVs[i])) {  # Find all studies with more than one IV, but ignore the one case where ";" is not used to separate IVs
f <- length(unlist(strsplit(curate_science$IVs[i], ";")))  # Count factors in interaction
lvl <- 2  # Assume for simplicity that all factors have 2 levels, which in this dataset is often but not always correct
x <- x / (2^(f-1)) / (f*lvl) * 2  # Applies the formula for interaction conversion in SM1, and multiplies the result by two to get the total sample size for a 2 group effect.
}
return(x)
})
curate_science$rep.N.adj <- adjusted_n_rep
sum_n_orig <- aggregate(curate_science$orig.N.adj, by=list(orig.study.number=curate_science$orig.study.number), FUN=mean)
sum_n_rep <- aggregate(curate_science$rep.N.adj, by=list(orig.study.number=curate_science$orig.study.number), FUN=sum)
sum_n_rep$sum.N <- as.numeric(sum_n_rep$x + sum_n_orig$x)
sum_n_rep$x <- NULL
curate_science <- merge(x = curate_science, y = sum_n_rep, by = "orig.study.number", all = TRUE)
curate_science$sum.RV <- curate_science$orig.citations / (as.numeric(format(Sys.Date(), "%Y")) - curate_science$orig.publ.year) / curate_science$sum.N
# Plot replication values before and after aggregation
RVdata <- aggregate(curate_science$orig.N.adj, by=list(orig.study.number=curate_science$orig.study.number, orig.RV=curate_science$orig.RV, sum.RV=curate_science$sum.RV), FUN=mean)
RVdata <- RVdata[order(-RVdata$orig.RV),]
RVdata$highRV <- ifelse(RVdata$orig.RV > 20, RVdata$orig.RV, NA)
ggplot(data = RVdata, aes(x = 1:nrow(RVdata), y = orig.RV)) +
geom_point() +
geom_point(aes(y = sum.RV), col = "blue") +
geom_text(aes(y = RVdata$highRV, label = orig.study.number), na.rm = TRUE, hjust = -.02, vjust = .0, check_overlap = TRUE) +
scale_colour_manual(name="RV",values=c("Original"="black")) +
theme_classic() +
labs(x = "Original study, sorted by original replication value", y = "Replication value")
curate_science$orig.RV <- curate_science$orig.citations (as.numeric(format(Sys.Date(), "%Y")) - curate_science$orig.publ.year) / curate_science$orig.N.adj
curate_science <- curate_science[order(curate_science$orig.study.number),]  # Order data to match crossref meta-data order (first author, alphabetically decending)
curate_science$IVs <- as.character(curate_science$IVs)
curate_science$orig.publ.year <- unlist(lapply(cursci_orig_cr, function(x) ifelse(is.null(x$`issued`$`date-parts`[1]), NA, x$`issued`$`date-parts`[1])))  # grab publication year from crossref meta-data
curate_science$orig.citations <- unlist(lapply(cursci_orig_cr, function(x) ifelse(is.null(x$`is-referenced-by-count`[1]), NA, x$`is-referenced-by-count`[1])))  # grab citation count from crossref meta-data
# Calculate replication value for original studies
adjusted_n_orig <- sapply(1:nrow(curate_science), function(i) {
x <- curate_science$orig.N[i]
if (curate_science$orig.ES.type[i] %in% c("dz", "PD")) {  # Find within-subject designs based on the effects size calculated (dz always used to refer to within-subject effect. PD was only used for precognition replication, also a within-subject design)
x <- x * 2/(1-0)  # Applies the formula for within-subject design conversin in SM1. The calculation assumes two groups and no correlation between the groups.
}
if (grepl(";", curate_science$IVs[i]) & !grepl("Hughes et al", curate_science$IVs[i])) {  # Find all studies with more than one IV, but ignore the one case where ";" is not used to separate IVs
f <- length(unlist(strsplit(curate_science$IVs[i], ";")))  # Count factors in interaction
lvl <- 2  # Assume for simplicity that all factors have 2 levels, which in this dataset is often but not always correct
x <- x / (2^(f-1)) / (f*lvl) * 2  # Applies the formula for interaction conversion in SM1, and multiplies the result by two to get the total sample size for a 2 group effect.
}
return(x)
})
curate_science$orig.N.adj <- unlist(adjusted_n_orig)
curate_science$orig.RV <- curate_science$orig.citations (as.numeric(format(Sys.Date(), "%Y")) - curate_science$orig.publ.year) / curate_science$orig.N.adj
# Calculate updated replication value based on the combined adjusted n of replications
adjusted_n_rep <- sapply(1:nrow(curate_science), function(i) {
x <- curate_science$rep.N[i]
if (curate_science$orig.ES.type[i] %in% c("dz", "PD")) {  # Find within-subject designs based on the effects size calculated (dz always used to refer to within-subject effect. PD was only used for precognition replication, also a within-subject design)
x <- x * 2/(1-0)  # Applies the formula for within-subject design conversin in SM1. The calculation assumes two groups and no correlation between the groups.
}
if (grepl(";", curate_science$IVs[i]) & !grepl("Hughes et al", curate_science$IVs[i])) {  # Find all studies with more than one IV, but ignore the one case where ";" is not used to separate IVs
f <- length(unlist(strsplit(curate_science$IVs[i], ";")))  # Count factors in interaction
lvl <- 2  # Assume for simplicity that all factors have 2 levels, which in this dataset is often but not always correct
x <- x / (2^(f-1)) / (f*lvl) * 2  # Applies the formula for interaction conversion in SM1, and multiplies the result by two to get the total sample size for a 2 group effect.
}
return(x)
})
curate_science$rep.N.adj <- adjusted_n_rep
sum_n_orig <- aggregate(curate_science$orig.N.adj, by=list(orig.study.number=curate_science$orig.study.number), FUN=mean)
sum_n_rep <- aggregate(curate_science$rep.N.adj, by=list(orig.study.number=curate_science$orig.study.number), FUN=sum)
sum_n_rep$sum.N <- as.numeric(sum_n_rep$x + sum_n_orig$x)
sum_n_rep$x <- NULL
curate_science <- merge(x = curate_science, y = sum_n_rep, by = "orig.study.number", all = TRUE)
curate_science$sum.RV <- curate_science$orig.citations / (as.numeric(format(Sys.Date(), "%Y")) - curate_science$orig.publ.year) / curate_science$sum.N
# Plot replication values before and after aggregation
RVdata <- aggregate(curate_science$orig.N.adj, by=list(orig.study.number=curate_science$orig.study.number, orig.RV=curate_science$orig.RV, sum.RV=curate_science$sum.RV), FUN=mean)
RVdata <- RVdata[order(-RVdata$orig.RV),]
RVdata$highRV <- ifelse(RVdata$orig.RV > 20, RVdata$orig.RV, NA)
ggplot(data = RVdata, aes(x = 1:nrow(RVdata), y = orig.RV)) +
geom_point() +
geom_point(aes(y = sum.RV), col = "blue") +
geom_text(aes(y = RVdata$highRV, label = orig.study.number), na.rm = TRUE, hjust = -.02, vjust = .0, check_overlap = TRUE) +
scale_colour_manual(name="RV",values=c("Original"="black")) +
theme_classic() +
labs(x = "Original study, sorted by original replication value", y = "Replication value")
curate_science <- curate_science[order(curate_science$orig.study.number),]  # Order data to match crossref meta-data order (first author, alphabetically decending)
curate_science$IVs <- as.character(curate_science$IVs)
curate_science$orig.publ.year <- unlist(lapply(cursci_orig_cr, function(x) ifelse(is.null(x$`issued`$`date-parts`[1]), NA, x$`issued`$`date-parts`[1])))  # grab publication year from crossref meta-data
curate_science$orig.citations <- unlist(lapply(cursci_orig_cr, function(x) ifelse(is.null(x$`is-referenced-by-count`[1]), NA, x$`is-referenced-by-count`[1])))  # grab citation count from crossref meta-data
adjusted_n_orig <- sapply(1:nrow(curate_science), function(i) {
x <- curate_science$orig.N[i]
if (curate_science$orig.ES.type[i] %in% c("dz", "PD")) {  # Find within-subject designs based on the effects size calculated (dz always used to refer to within-subject effect. PD was only used for precognition replication, also a within-subject design)
x <- x * 2/(1-0)  # Applies the formula for within-subject design conversin in SM1. The calculation assumes two groups and no correlation between the groups.
}
if (grepl(";", curate_science$IVs[i]) & !grepl("Hughes et al", curate_science$IVs[i])) {  # Find all studies with more than one IV, but ignore the one case where ";" is not used to separate IVs
f <- length(unlist(strsplit(curate_science$IVs[i], ";")))  # Count factors in interaction
lvl <- 2  # Assume for simplicity that all factors have 2 levels, which in this dataset is often but not always correct
x <- x / (2^(f-1)) / (f*lvl) * 2  # Applies the formula for interaction conversion in SM1, and multiplies the result by two to get the total sample size for a 2 group effect.
}
return(x)
})
curate_science$orig.N.adj <- unlist(adjusted_n_orig)
curate_science$orig.RV <- curate_science$orig.citations (as.numeric(format(Sys.Date(), "%Y")) - curate_science$orig.publ.year) / curate_science$orig.N.adj
curate_science$orig.RV <- curate_science$orig.citations / (as.numeric(format(Sys.Date(), "%Y")) - curate_science$orig.publ.year) / curate_science$orig.N.adj
adjusted_n_rep <- sapply(1:nrow(curate_science), function(i) {
x <- curate_science$rep.N[i]
if (curate_science$orig.ES.type[i] %in% c("dz", "PD")) {  # Find within-subject designs based on the effects size calculated (dz always used to refer to within-subject effect. PD was only used for precognition replication, also a within-subject design)
x <- x * 2/(1-0)  # Applies the formula for within-subject design conversin in SM1. The calculation assumes two groups and no correlation between the groups.
}
if (grepl(";", curate_science$IVs[i]) & !grepl("Hughes et al", curate_science$IVs[i])) {  # Find all studies with more than one IV, but ignore the one case where ";" is not used to separate IVs
f <- length(unlist(strsplit(curate_science$IVs[i], ";")))  # Count factors in interaction
lvl <- 2  # Assume for simplicity that all factors have 2 levels, which in this dataset is often but not always correct
x <- x / (2^(f-1)) / (f*lvl) * 2  # Applies the formula for interaction conversion in SM1, and multiplies the result by two to get the total sample size for a 2 group effect.
}
return(x)
})
curate_science$rep.N.adj <- adjusted_n_rep
sum_n_orig <- aggregate(curate_science$orig.N.adj, by=list(orig.study.number=curate_science$orig.study.number), FUN=mean)
sum_n_rep <- aggregate(curate_science$rep.N.adj, by=list(orig.study.number=curate_science$orig.study.number), FUN=sum)
sum_n_rep$sum.N <- as.numeric(sum_n_rep$x + sum_n_orig$x)
sum_n_rep$x <- NULL
curate_science <- merge(x = curate_science, y = sum_n_rep, by = "orig.study.number", all = TRUE)
curate_science$sum.RV <- curate_science$orig.citations / (as.numeric(format(Sys.Date(), "%Y")) - curate_science$orig.publ.year) / curate_science$sum.N
# Plot replication values before and after aggregation
RVdata <- aggregate(curate_science$orig.N.adj, by=list(orig.study.number=curate_science$orig.study.number, orig.RV=curate_science$orig.RV, sum.RV=curate_science$sum.RV), FUN=mean)
RVdata <- RVdata[order(-RVdata$orig.RV),]
RVdata$highRV <- ifelse(RVdata$orig.RV > 20, RVdata$orig.RV, NA)
ggplot(data = RVdata, aes(x = 1:nrow(RVdata), y = orig.RV)) +
geom_point() +
geom_point(aes(y = sum.RV), col = "blue") +
geom_text(aes(y = RVdata$highRV, label = orig.study.number), na.rm = TRUE, hjust = -.02, vjust = .0, check_overlap = TRUE) +
scale_colour_manual(name="RV",values=c("Original"="black")) +
theme_classic() +
labs(x = "Original study, sorted by original replication value", y = "Replication value")
ggplot(data = RVdata, aes(x = 1:nrow(RVdata), y = orig.RV)) +
geom_point() +
geom_point(aes(y = sum.RV), col = "blue") +
#geom_text(aes(y = RVdata$highRV, label = orig.study.number), na.rm = TRUE, hjust = -.02, vjust = .0, check_overlap = TRUE) +
scale_colour_manual(name="RV",values=c("Original"="black")) +
theme_classic() +
labs(x = "Original study, sorted by original replication value", y = "Replication value")
# Plot replication values before and after aggregation
RVdata <- aggregate(curate_science$orig.N.adj, by=list(orig.study.number=curate_science$orig.study.number, orig.RV=curate_science$orig.RV, sum.RV=curate_science$sum.RV), FUN=mean)
RVdata <- RVdata[order(-RVdata$orig.RV),]
RVdata$highRV <- ifelse(RVdata$orig.RV > 1, RVdata$orig.RV, NA)
ggplot(data = RVdata, aes(x = 1:nrow(RVdata), y = orig.RV)) +
geom_point() +
geom_point(aes(y = sum.RV), col = "blue") +
geom_text(aes(y = RVdata$highRV, label = orig.study.number), na.rm = TRUE, hjust = -.02, vjust = .0, check_overlap = TRUE) +
scale_colour_manual(name="RV",values=c("Original"="black")) +
theme_classic() +
labs(x = "Original study, sorted by original replication value", y = "Replication value")
ggplot(data = RVdata, aes(x = 1:nrow(RVdata), y = orig.RV)) +
geom_point() +
geom_point(aes(y = sum.RV), col = "blue") +
geom_text(aes(y = RVdata$highRV, label = orig.study.number), na.rm = TRUE, hjust = -.02, vjust = .0, position = "dodge") +
scale_colour_manual(name="RV",values=c("Original"="black")) +
theme_classic() +
labs(x = "Original study, sorted by original replication value", y = "Replication value")
ggplot(data = RVdata, aes(x = 1:nrow(RVdata), y = orig.RV)) +
geom_point() +
geom_point(aes(y = sum.RV), col = "blue") +
geom_text(aes(y = RVdata$highRV, label = orig.study.number), na.rm = TRUE, hjust = -.02, vjust = .0, position = position_dodge()) +
scale_colour_manual(name="RV",values=c("Original"="black")) +
theme_classic() +
labs(x = "Original study, sorted by original replication value", y = "Replication value")
ggplot(data = RVdata, aes(x = 1:nrow(RVdata), y = orig.RV)) +
geom_point() +
geom_point(aes(y = sum.RV), col = "blue") +
geom_text(aes(y = RVdata$highRV, label = orig.study.number), na.rm = TRUE, hjust = -.02, vjust = .0, position = position_dodge(width = 1)) +
scale_colour_manual(name="RV",values=c("Original"="black")) +
theme_classic() +
labs(x = "Original study, sorted by original replication value", y = "Replication value")
ggplot(data = RVdata, aes(x = 1:nrow(RVdata), y = orig.RV)) +
geom_point() +
geom_point(aes(y = sum.RV), col = "blue") +
geom_text(aes(y = RVdata$highRV, label = orig.study.number), na.rm = TRUE, hjust = -.02, vjust = .0, position = position_dodge(width = 1)) +
scale_colour_manual(name="RV",values=c("Original"="black")) +
theme_classic() +
labs(x = "Original study, sorted by original replication value", y = "Replication value")
ggplot(data = RVdata, aes(x = 1:nrow(RVdata), y = orig.RV)) +
geom_point() +
geom_point(aes(y = sum.RV), col = "blue") +
geom_text(aes(y = RVdata$highRV, label = orig.study.number), na.rm = TRUE, hjust = -.02, vjust = .0, position = position_dodge(width = 2)) +
scale_colour_manual(name="RV",values=c("Original"="black")) +
theme_classic() +
labs(x = "Original study, sorted by original replication value", y = "Replication value")
ggplot(data = RVdata, aes(x = 1:nrow(RVdata), y = orig.RV)) +
geom_point() +
geom_point(aes(y = sum.RV), col = "blue") +
geom_text(aes(y = RVdata$highRV, label = orig.study.number), na.rm = TRUE, hjust = -.02, vjust = .0, position = position_dodge(width = 10)) +
scale_colour_manual(name="RV",values=c("Original"="black")) +
theme_classic() +
labs(x = "Original study, sorted by original replication value", y = "Replication value")
ggplot(data = RVdata, aes(x = 1:nrow(RVdata), y = orig.RV)) +
geom_point() +
geom_point(aes(y = sum.RV), col = "blue") +
geom_text(aes(y = RVdata$highRV, label = orig.study.number), na.rm = TRUE, hjust = -.02, vjust = .0)) +
scale_colour_manual(name="RV",values=c("Original"="black")) +
theme_classic() +
labs(x = "Original study, sorted by original replication value", y = "Replication value")
ggplot(data = RVdata, aes(x = 1:nrow(RVdata), y = orig.RV)) +
geom_point() +
geom_point(aes(y = sum.RV), col = "blue") +
geom_text(aes(y = RVdata$highRV, label = orig.study.number), na.rm = TRUE, hjust = -.02, vjust = .0) +
scale_colour_manual(name="RV",values=c("Original"="black")) +
theme_classic() +
labs(x = "Original study, sorted by original replication value", y = "Replication value")
RVdata$highRV <- ifelse(RVdata$orig.RV > 0.5, RVdata$orig.RV, NA)
ggplot(data = RVdata, aes(x = 1:nrow(RVdata), y = orig.RV)) +
geom_point() +
geom_point(aes(y = sum.RV), col = "blue") +
geom_text(aes(y = RVdata$highRV, label = orig.study.number), na.rm = TRUE, hjust = -.02, vjust = .0) +
scale_colour_manual(name="RV",values=c("Original"="black")) +
theme_classic() +
labs(x = "Original study, sorted by original replication value", y = "Replication value")
7200/80/200
RVdata$highRV <- ifelse(RVdata$orig.RV > 1 | RVdata$orig.study.number == "Stroop (1935) Study 2", RVdata$orig.RV, NA)
ggplot(data = RVdata, aes(x = 1:nrow(RVdata), y = orig.RV)) +
geom_point() +
geom_point(aes(y = sum.RV), col = "blue") +
geom_text(aes(y = RVdata$highRV, label = orig.study.number), na.rm = TRUE, hjust = -.02, vjust = .0) +
scale_colour_manual(name="RV",values=c("Original"="black")) +
theme_classic() +
labs(x = "Original study, sorted by original replication value", y = "Replication value")
curate_science <- curate_science[order(curate_science$orig.study.number),]  # Order data to match crossref meta-data order (first author, alphabetically decending)
curate_science$IVs <- as.character(curate_science$IVs)
curate_science$orig.publ.year <- unlist(lapply(cursci_orig_cr, function(x) ifelse(is.null(x$`issued`$`date-parts`[1]), NA, x$`issued`$`date-parts`[1])))  # grab publication year from crossref meta-data
curate_science$orig.citations <- unlist(lapply(cursci_orig_cr, function(x) ifelse(is.null(x$`is-referenced-by-count`[1]), NA, x$`is-referenced-by-count`[1])))  # grab citation count from crossref meta-data
# Calculate replication value for original studies
adjusted_n_orig <- sapply(1:nrow(curate_science), function(i) {
x <- curate_science$orig.N[i]
if (curate_science$orig.ES.type[i] %in% c("dz", "PD")) {  # Find within-subject designs based on the effects size calculated (dz always used to refer to within-subject effect. PD was only used for precognition replication, also a within-subject design)
x <- x * 2/(1-0)  # Applies the formula for within-subject design conversin in SM1. The calculation assumes two groups and no correlation between the groups.
}
if (grepl(";", curate_science$IVs[i]) & !grepl("Hughes et al", curate_science$IVs[i])) {  # Find all studies with more than one IV, but ignore the one case where ";" is not used to separate IVs
f <- length(unlist(strsplit(curate_science$IVs[i], ";")))  # Count factors in interaction
lvl <- 2  # Assume for simplicity that all factors have 2 levels, which in this dataset is often but not always correct
x <- x / (2^(f-1)) / (f*lvl) * 2  # Applies the formula for interaction conversion in SM1, and multiplies the result by two to get the total sample size for a 2 group effect.
}
return(x)
})
curate_science$orig.N.adj <- unlist(adjusted_n_orig)
curate_science$orig.RV <- curate_science$orig.citations / (as.numeric(format(Sys.Date(), "%Y")) - curate_science$orig.publ.year) / curate_science$orig.N.adj
# Calculate updated replication value based on the combined adjusted n of replications
adjusted_n_rep <- sapply(1:nrow(curate_science), function(i) {
x <- curate_science$rep.N[i]
if (curate_science$orig.ES.type[i] %in% c("dz", "PD")) {  # Find within-subject designs based on the effects size calculated (dz always used to refer to within-subject effect. PD was only used for precognition replication, also a within-subject design)
x <- x * 2/(1-0)  # Applies the formula for within-subject design conversin in SM1. The calculation assumes two groups and no correlation between the groups.
}
if (grepl(";", curate_science$IVs[i]) & !grepl("Hughes et al", curate_science$IVs[i])) {  # Find all studies with more than one IV, but ignore the one case where ";" is not used to separate IVs
f <- length(unlist(strsplit(curate_science$IVs[i], ";")))  # Count factors in interaction
lvl <- 2  # Assume for simplicity that all factors have 2 levels, which in this dataset is often but not always correct
x <- x / (2^(f-1)) / (f*lvl) * 2  # Applies the formula for interaction conversion in SM1, and multiplies the result by two to get the total sample size for a 2 group effect.
}
return(x)
})
curate_science$rep.N.adj <- adjusted_n_rep
sum_n_orig <- aggregate(curate_science$orig.N.adj, by=list(orig.study.number=curate_science$orig.study.number), FUN=mean)
sum_n_rep <- aggregate(curate_science$rep.N.adj, by=list(orig.study.number=curate_science$orig.study.number), FUN=sum)
sum_n_rep$sum.N <- as.numeric(sum_n_rep$x + sum_n_orig$x)
sum_n_rep$x <- NULL
curate_science <- merge(x = curate_science, y = sum_n_rep, by = "orig.study.number", all = TRUE)
curate_science$sum.RV <- curate_science$orig.citations / (as.numeric(format(Sys.Date(), "%Y")) - curate_science$orig.publ.year) / curate_science$sum.N
# Plot replication values before and after aggregation
RVdata <- aggregate(curate_science$orig.N.adj, by=list(orig.study.number=curate_science$orig.study.number, orig.RV=curate_science$orig.RV, sum.RV=curate_science$sum.RV), FUN=mean)
RVdata <- RVdata[order(-RVdata$orig.RV),]
RVdata$highRV <- ifelse(RVdata$orig.RV > 1 | RVdata$orig.study.number == "Stroop (1935) Study 2", RVdata$orig.RV, NA)
ggplot(data = RVdata, aes(x = 1:nrow(RVdata), y = orig.RV)) +
geom_point() +
geom_point(aes(y = sum.RV), col = "blue") +
geom_text(aes(y = RVdata$highRV, label = orig.study.number), na.rm = TRUE, hjust = -.02, vjust = .0) +
scale_colour_manual(name="RV",values=c("Original"="black")) +
theme_classic() +
labs(x = "Original study, sorted by original replication value", y = "Replication value")
curate_science <- read.csv("https://raw.githubusercontent.com/eplebel/science-commons/master/CS.rep.table.csv", na.strings = "")
curate_science <- curate_science[order(curate_science$orig.study.number),]  # Order data to match crossref meta-data order (first author, alphabetically decending)
curate_science$IVs <- as.character(curate_science$IVs)
curate_science$orig.publ.year <- unlist(lapply(cursci_orig_cr, function(x) ifelse(is.null(x$`issued`$`date-parts`[1]), NA, x$`issued`$`date-parts`[1])))  # grab publication year from crossref meta-data
curate_science$orig.citations <- unlist(lapply(cursci_orig_cr, function(x) ifelse(is.null(x$`is-referenced-by-count`[1]), NA, x$`is-referenced-by-count`[1])))  # grab citation count from crossref meta-data
# Calculate replication value for original studies
adjusted_n_orig <- sapply(1:nrow(curate_science), function(i) {
x <- curate_science$orig.N[i]
if (curate_science$orig.ES.type[i] %in% c("dz", "PD")) {  # Find within-subject designs based on the effects size calculated (dz always used to refer to within-subject effect. PD was only used for precognition replication, also a within-subject design)
x <- x * 2/(1-0)  # Applies the formula for within-subject design conversin in SM1. The calculation assumes two groups and no correlation between the groups.
}
if (grepl(";", curate_science$IVs[i]) & !grepl("Hughes et al", curate_science$IVs[i])) {  # Find all studies with more than one IV, but ignore the one case where ";" is not used to separate IVs
f <- length(unlist(strsplit(curate_science$IVs[i], ";")))  # Count factors in interaction
lvl <- 2  # Assume for simplicity that all factors have 2 levels, which in this dataset is often but not always correct
x <- x / (2^(f-1)) / (f*lvl) * 2  # Applies the formula for interaction conversion in SM1, and multiplies the result by two to get the total sample size for a 2 group effect.
}
return(x)
})
curate_science$orig.N.adj <- unlist(adjusted_n_orig)
curate_science$orig.RV <- curate_science$orig.citations / (as.numeric(format(Sys.Date(), "%Y")) - curate_science$orig.publ.year) / curate_science$orig.N.adj
# Calculate updated replication value based on the combined adjusted n of replications
adjusted_n_rep <- sapply(1:nrow(curate_science), function(i) {
x <- curate_science$rep.N[i]
if (curate_science$orig.ES.type[i] %in% c("dz", "PD")) {  # Find within-subject designs based on the effects size calculated (dz always used to refer to within-subject effect. PD was only used for precognition replication, also a within-subject design)
x <- x * 2/(1-0)  # Applies the formula for within-subject design conversin in SM1. The calculation assumes two groups and no correlation between the groups.
}
if (grepl(";", curate_science$IVs[i]) & !grepl("Hughes et al", curate_science$IVs[i])) {  # Find all studies with more than one IV, but ignore the one case where ";" is not used to separate IVs
f <- length(unlist(strsplit(curate_science$IVs[i], ";")))  # Count factors in interaction
lvl <- 2  # Assume for simplicity that all factors have 2 levels, which in this dataset is often but not always correct
x <- x / (2^(f-1)) / (f*lvl) * 2  # Applies the formula for interaction conversion in SM1, and multiplies the result by two to get the total sample size for a 2 group effect.
}
return(x)
})
curate_science$rep.N.adj <- adjusted_n_rep
sum_n_orig <- aggregate(curate_science$orig.N.adj, by=list(orig.study.number=curate_science$orig.study.number), FUN=mean)
sum_n_rep <- aggregate(curate_science$rep.N.adj, by=list(orig.study.number=curate_science$orig.study.number), FUN=sum)
sum_n_rep$sum.N <- as.numeric(sum_n_rep$x + sum_n_orig$x)
sum_n_rep$x <- NULL
curate_science <- merge(x = curate_science, y = sum_n_rep, by = "orig.study.number", all = TRUE)
curate_science$sum.RV <- curate_science$orig.citations / (as.numeric(format(Sys.Date(), "%Y")) - curate_science$orig.publ.year) / curate_science$sum.N
# Plot replication values before and after aggregation
RVdata <- aggregate(curate_science$orig.N.adj, by=list(orig.study.number=curate_science$orig.study.number, orig.RV=curate_science$orig.RV, sum.RV=curate_science$sum.RV), FUN=mean)
RVdata <- RVdata[order(-RVdata$orig.RV),]
RVdata$highRV <- ifelse(RVdata$orig.RV > 1 | RVdata$orig.study.number == "Stroop (1935) Study 2", RVdata$orig.RV, NA)
ggplot(data = RVdata, aes(x = 1:nrow(RVdata), y = orig.RV)) +
geom_point() +
geom_point(aes(y = sum.RV), col = "blue") +
geom_text(aes(y = RVdata$highRV, label = orig.study.number), na.rm = TRUE, hjust = -.02, vjust = .0) +
scale_colour_manual(name="RV",values=c("Original"="black")) +
theme_classic() +
labs(x = "Original study, sorted by original replication value", y = "Replication value")
nrow(curate_science)
unique(curate_science$orig.study.number)
nrow(unique(curate_science$orig.study.number))
length(unique(curate_science$orig.study.number))
hist(curate_science$rep.ES)
summary(curate_science$rep.ES)
(curate_science$rep.ES)
(curate_science$rep.ES[curate_science$orig.ES.type == "d"])
hist(curate_science$rep.ES[curate_science$orig.ES.type == "d"])
hist(as.numeric(curate_science$rep.ES[curate_science$orig.ES.type == "d"]))
hist(as.numeric(curate_science$rep.ES[curate_science$orig.ES.type == "d"]), breaks = 100)
as.numeric(curate_science$rep.ES[curate_science$orig.ES.type == "d"])
(curate_science$rep.ES[curate_science$orig.ES.type == "d"])
plot((curate_science$rep.ES[curate_science$orig.ES.type == "d"])
)
typeof(((curate_science$rep.ES[curate_science$orig.ES.type == "d"]))
)
hist((curate_science$rep.ES[curate_science$orig.ES.type == "d"])
)
hist(as.integer((curate_science$rep.ES[curate_science$orig.ES.type == "d"])))
curate_science$rep.ES[curate_science$orig.ES.type == "d"][1]
as.numeric(curate_science$rep.ES[curate_science$orig.ES.type == "d"][1])
as.character(curate_science$rep.ES[curate_science$orig.ES.type == "d"][1])
as.numeric(as.character(curate_science$rep.ES[curate_science$orig.ES.type == "d"][1]))
hist(as.numeric(as.character(curate_science$rep.ES[curate_science$orig.ES.type == "d"])))
hist(as.numeric(as.character(curate_science$rep.ES[curate_science$orig.ES.type == "d"])), breaks = 100)
dens(as.numeric(as.character(curate_science$rep.ES[curate_science$orig.ES.type == "d"])), breaks = 100)
qplot(x = as.numeric(as.character(curate_science$rep.ES[curate_science$orig.ES.type == "d"])), geom = "histogram")
qplot(x = as.numeric(as.character(curate_science$rep.ES[curate_science$orig.ES.type == "d"])), geom = "histogram", breaks = 100)
qplot(x = as.numeric(as.character(curate_science$rep.ES[curate_science$orig.ES.type == "d"])), geom = "histogram")
qplot(x = as.numeric(as.character(curate_science$rep.ES[curate_science$orig.ES.type == "d"]))) + geom_histogram(bins = 100)
qplot(x = as.numeric(as.character(curate_science$rep.ES[curate_science$orig.ES.type == "d"]))) + geom_histogram(bins = 1000)
qplot() + geom_histogram(data = as.numeric(as.character(curate_science$rep.ES[curate_science$orig.ES.type == "d"])))
qplot() + geom_histogram(data = as.numeric(as.character(curate_science$rep.ES[curate_science$orig.ES.type == "d"])), bins = 100)
qplot() + geom_histogram(aes(data = as.numeric(as.character(curate_science$rep.ES[curate_science$orig.ES.type == "d"]))), bins = 100)
qplot() + geom_histogram(data = as.numeric(as.character(curate_science$rep.ES[curate_science$orig.ES.type == "d"])), bins = 100)
qplot() + geom_histogram(data = as.numeric(as.character(curate_science$rep.ES[curate_science$orig.ES.type == "d"])))
hist(as.numeric(as.character(curate_science$rep.ES[curate_science$orig.ES.type == "d"])), breaks = 100)
hist(as.numeric(as.character(curate_science$rep.ES[curate_science$orig.ES.type == "d"])), breaks = 100, xlab = "Cohen's d", density = 1)
hist(as.numeric(as.character(curate_science$rep.ES[curate_science$orig.ES.type == "d"])), breaks = 100, xlab = "Cohen's d", col = "blue")
hist(as.numeric(as.character(curate_science$rep.ES[curate_science$orig.ES.type == "d"])), breaks = 100, xlab = "Cohen's d", main = "titel", col = "blue")
hist(as.numeric(as.character(curate_science$rep.ES[curate_science$orig.ES.type == "d"])), breaks = 100, xlab = "Cohen's d", main = "Distribution of Cohen's d effect size", col = "blue")
x <- as.numeric(as.character(curate_science$rep.ES[curate_science$orig.ES.type == "d" & !grepl("inconsistent", curate_science$rep.outcome)])
x <- as.numeric(as.character(curate_science$rep.ES[curate_science$orig.ES.type == "d" & !grepl("inconsistent", curate_science$rep.outcome)]))
x
hist(x,
breaks = 100,
xlab = "Cohen's d",
main = "Distribution of Cohen's d effect size",
col = "blue")
hist(x,
breaks = 100,
xlab = "Cohen's d",
main = "Distribution of Cohen's d effect size",
col = "blue", xmax = 3)
hist(x,
breaks = 100,
xlab = "Cohen's d",
main = "Distribution of Cohen's d effect size",
col = "blue")
axis(1, pos=0)
hist(x,
breaks = 100,
xlab = "Cohen's d",
main = "Distribution of Cohen's d effect size",
col = "blue")
axis(1, pos=0)
axis(1, pos=2)
hist(x,
breaks = 100,
xlab = "Cohen's d",
main = "Distribution of Cohen's d effect size",
col = "blue")
axis(1, pos=0)
y <- as.numeric(as.character(curate_science$rep.ES[curate_science$orig.ES.type == "d"]))
x <- as.numeric(as.character(curate_science$rep.ES[curate_science$orig.ES.type == "d" & !grepl("inconsistent", curate_science$rep.outcome)]))
qplot(x = x, geom = "histogram", bins = 10)
qplot(x = x, geom = "histogram", bins = 100)
qplot(x = x, geom = "histogram", bins = 100) + geom_histogram(aes(x = y), col = "red")
qplot(x = y, geom = "histogram", bins = 100) + geom_histogram(aes(x = y), col = "red")
qplot(x = y, geom = "histogram", bins = 100) + geom_histogram(aes(x = x), col = "red")
qplot(x = y, geom = "histogram", bins = 100) + geom_histogram(aes(x = x), col = "red", bins = 100)
qplot(x = y, geom = "histogram", bins = 100) + geom_histogram(aes(x = x), fill = "red", bins = 100)
qplot(x = y, geom = "histogram", bins = 100, fill = "blue") + geom_histogram(aes(x = x), fill = "red", bins = 100)
ggplot() + geom_histogram(aes(x = x), fill = "red", bins = 100)
ggplot() + geom_histogram(aes(x = y), fill = "blue", bins = 100) + geom_histogram(aes(x = x), fill = "red", bins = 100)
ggplot() + geom_histogram(aes(x = y), fill = "blue", bins = 100) + geom_histogram(aes(x = x), fill = "red", bins = 100, alpha = 0.2)
ggplot() + geom_histogram(aes(x = y), fill = "blue", bins = 100, alpha = 0.2) + geom_histogram(aes(x = x), fill = "red", bins = 100, alpha = 0.2)
ggplot() + geom_density(aes(x = y), fill = "blue", bins = 100, alpha = 0.2) + geom_histogram(aes(x = x), fill = "red", bins = 100, alpha = 0.2)
ggplot() + geom_density(aes(x = y), fill = "blue", bins = 100, alpha = 0.2) + geom_density(aes(x = x), fill = "red", bins = 100, alpha = 0.2)
ggplot() + geom_density(aes(x = y), fill = "blue", bins = 100, alpha = 0.6) + geom_density(aes(x = x), fill = "red", bins = 100, alpha = 0.6)
ggplot() +
geom_density(aes(x = y), fill = "blue", bins = 100, alpha = 0.6) +
geom_density(aes(x = x), fill = "red", bins = 100, alpha = 0.6) +
labs(x = "Cohen's d", title = "title")
ggplot() +
geom_density(aes(x = y), fill = "blue", bins = 100, alpha = 0.5) +
geom_density(aes(x = x), fill = "red", bins = 100, alpha = 0.5) +
labs(x = "Cohen's d", title = "blue = all replications, red = only successful replications")
ggplot() +
geom_density(aes(x = y), fill = "blue", bins = 100, alpha = 0.6) +
geom_density(aes(x = x), fill = "red", bins = 100, alpha = 0.6) +
labs(x = "Cohen's d", title = "blue = all replications, red = only successful replications")
